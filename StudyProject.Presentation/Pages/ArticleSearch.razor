@page "/anotacao"
@using StudyProject.Application
@using StudyProject.Core.ArticleAggregate
@inject DatabaseAccess databaseAccess

<PageTitle>Busca</PageTitle>

<input class="input-text" type="text" @bind="searchTerm" placeholder="Busque anotações por titulo..." />

<ActionButton OnClick="async () => await SearchArticles()"><Icon IconName="search"/></ActionButton>

@if (results.Length > 0)
{
	<div>
		<h4>Encontrados:</h4>
		@foreach (var result in results)
		{
			<RedirectPanel Destination="@($"anotacao/{databaseAccess.CreateId(result)}")">
				<h2>@result</h2>
			</RedirectPanel>
		}
	</div>
}


@code {
	private string searchTerm;
	private Article[] searchResults;

	private string[] keys = new string[0];
	private string[] results = new string[0];
	private async Task SearchArticles()
	{
		if(keys.Length == 0) keys = await databaseAccess.GetArticleIdsAsync();

		if (!string.IsNullOrWhiteSpace(searchTerm))
		{
			var beginsWith = keys.Where(k => k.StartsWith(searchTerm, StringComparison.OrdinalIgnoreCase)).ToArray();
			var contains = keys.Where(k => k.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToArray();
			results = beginsWith.Union(contains)
								.Order()
								.Select(e => e.Replace('-', ' '))
								.Select(s => char.ToUpper(s[0]) + s.Substring(1))
								.ToArray();
		}
		else
		{
			// Clear searchResults if the search term is empty
			searchResults = null;
		}
	}


	private int index = 0;
	private string GetGradientColor()
	{
		int hue = 15 + index * 10; // Adjusted for warmer colors
		int saturation = 80; // Adjust saturation as needed
		int lightness = 60; // Adjust lightness as needed
		index++;
		return $"hsl({hue}, {saturation}%, {lightness}%)";
	}
}
