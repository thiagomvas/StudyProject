@page "/article/{Id}"
@using MathJaxBlazor
@using Newtonsoft.Json
@using StudyProject.Application
@using StudyProject.Core.ArticleAggregate
@using System.Text.RegularExpressions
@using StudyProject.Presentation.Pages
@inject DatabaseAccess db
@inject IJSRuntime JSRuntime
@inject HttpClient Http


@if (article == null)
{
	<p><em>Loading...</em></p>
	<PageTitle>Loading...</PageTitle>
}
else
{
	<ArticleViewer Article="article"/>
	<PageTitle>@article.Title</PageTitle>
}



@code {
	[Parameter] public string Id { get; set; }

	Article? article;

	protected override async Task OnInitializedAsync()
	{
		string cachedArticle = await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"article_{Id}");
		DateTime LastEdit = await db.GetArticleLastEditAsync(Id);


		if (!string.IsNullOrEmpty(cachedArticle))
			article = JsonConvert.DeserializeObject<Article>(cachedArticle);

		if (article != null && article.LastEdit == LastEdit)
			Console.WriteLine("Article is up to date");
		else
		{

			article = await db.GetArticleAsync(Id);

			string serializedArticle = JsonConvert.SerializeObject(article);
			await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"article_{Id}", serializedArticle);
		}

	}

}