@page "/article/{Id}"
@using MathJaxBlazor
@using Newtonsoft.Json
@using StudyProject.Application
@using StudyProject.Core.ArticleAggregate
@using System.Text.RegularExpressions
@inject DatabaseAccess db
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (article == null)
{
    <p><em>Loading...</em></p>
}
else
{
	<h1>@article.Title</h1>
	@foreach (Match match in Regex.Matches(article.Content, @"(\$\$.*?\$\$|\$[^$]*\$)|([^$]+)"))
	{
		string text = match.Value;
		if (text.Contains("$$"))
		{
			<Equation Value="@text.Replace("$$", "")" />

		}
		else if (text.Contains('$'))
		{
			<Equation Value="@text.Replace('$', ' ')" TeXDisplay=false />
		}
		else
		{
			@((MarkupString)text)
		}
	}

}


@code {
	[Parameter] public string Id { get; set; }

	Article? article;

	protected override async Task OnInitializedAsync()
	{
		// Check if the article is already in the local storage
		string cachedArticle = await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"article_{Id}");

		if (!string.IsNullOrEmpty(cachedArticle))
		{
			// If the article is cached, deserialize it from the local storage
			article = JsonConvert.DeserializeObject<Article>(cachedArticle);
			Console.WriteLine("CACHED!!!!");
		}
		else
		{

			Console.WriteLine("NOT CACHED!!!!");
			// If not cached, fetch the article from the server
			article = await db.GetArticleAsync(Id);

			// Serialize and store the article in the local storage for future use
			string serializedArticle = JsonConvert.SerializeObject(article);
			await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"article_{Id}", serializedArticle);
		}
	}


}