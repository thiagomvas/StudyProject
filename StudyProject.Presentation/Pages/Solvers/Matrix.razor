@page "/solvers/Matrix"
@using System.Text
@using TMath.Numerics
@using TMath.Numerics.LinearAlgebra
@using TMath.Numerics.Models
@using MathJaxBlazor

<PageTitle>Matrix Operations</PageTitle>

<h3>Matrix Operations</h3>
<br />

<div style="max-width: 800px; margin: auto; display: flex; justify-content: space-between;">

	<div style="display: grid; grid-template-columns: repeat(3, 50px); gap: 10px;">
		<input type="text" style="width: 50px" placeholder="1" @bind-value="a[0]" />
		<input type="text" style="width: 50px" placeholder="2" @bind-value="a[1]" />
		<input type="text" style="width: 50px" placeholder="3" @bind-value="a[2]" />
		<input type="text" style="width: 50px" placeholder="4" @bind-value="a[3]" />
		<input type="text" style="width: 50px" placeholder="5" @bind-value="a[4]" />
		<input type="text" style="width: 50px" placeholder="6" @bind-value="a[5]" />
		<input type="text" style="width: 50px" placeholder="7" @bind-value="a[6]" />
		<input type="text" style="width: 50px" placeholder="8" @bind-value="a[7]" />
		<input type="text" style="width: 50px" placeholder="9" @bind-value="a[8]" />
		<CustomButton Width="100px" OnClick="TransposeA">Transpose</CustomButton>
	</div>

	<div style="display: grid; grid-template-columns: repeat(3, 100px); gap: 10px;">
		<CustomButton Width="100px" OnClick="Add">A + B</CustomButton>
		<CustomButton Width="100px" OnClick="Subtract">A - B</CustomButton>
		<CustomButton Width="100px" OnClick="Multiply">A * B </CustomButton>
	</div>

	<div style="display: grid; grid-template-columns: repeat(3, 50px); gap: 10px;">
		<input type="text" style="width: 50px" placeholder="1" @bind-value="b[0]" />
		<input type="text" style="width: 50px" placeholder="2" @bind-value="b[1]" />
		<input type="text" style="width: 50px" placeholder="3" @bind-value="b[2]" />
		<input type="text" style="width: 50px" placeholder="4" @bind-value="b[3]" />
		<input type="text" style="width: 50px" placeholder="5" @bind-value="b[4]" />
		<input type="text" style="width: 50px" placeholder="6" @bind-value="b[5]" />
		<input type="text" style="width: 50px" placeholder="7" @bind-value="b[6]" />
		<input type="text" style="width: 50px" placeholder="8" @bind-value="b[7]" />
		<input type="text" style="width: 50px" placeholder="9" @bind-value="b[8]" />
		<CustomButton Width="100px" OnClick="TransposeB">Transpose</CustomButton>
	</div>
</div>

<hr style="border: 1px solid #ccc; margin: 20px 0;" />
<div>Output: <Equation Value="@output" TeXDisplay="false" /></div>




@code {
	string[] a = new string[9];
	string[] b = new string[9];

	string output;

	private void TransposeA()
	{
		var matrixA = new TMatrix<double>(3, 3);

		for (int i = 0; i < 9; i++)
		{
			matrixA[i / 3, i % 3] = double.Parse(a[i]);
		}

		var result = matrixA.Transpose();

		output = MatrixToLatex(result);
	}

	private void TransposeB()
	{
		var matrixB = new TMatrix<double>(3, 3);

		for (int i = 0; i < 9; i++)
		{
			matrixB[i / 3, i % 3] = double.Parse(b[i]);
		}

		var result = matrixB.Transpose();

		output = MatrixToLatex(result);
	}

	private void Add()
	{
		var matrixA = new TMatrix<double>(3, 3);
		var matrixB = new TMatrix<double>(3, 3);

		for (int i = 0; i < 9; i++)
		{
			matrixA[i / 3, i % 3] = double.Parse(a[i]);
			matrixB[i / 3, i % 3] = double.Parse(b[i]);
		}

		var result = matrixA + matrixB;

		output = MatrixToLatex(result);
	}

	private void Subtract()
	{
		var matrixA = new TMatrix<double>(3, 3);
		var matrixB = new TMatrix<double>(3, 3);

		for (int i = 0; i < 9; i++)
		{
			matrixA[i / 3, i % 3] = double.Parse(a[i]);
			matrixB[i / 3, i % 3] = double.Parse(b[i]);
		}

		var result = matrixA - matrixB;

		output = MatrixToLatex(result);
	}

	private void Multiply()
	{
		var matrixA = new TMatrix<double>(3, 3);
		var matrixB = new TMatrix<double>(3, 3);

		for (int i = 0; i < 9; i++)
		{
			matrixA[i / 3, i % 3] = double.Parse(a[i]);
			matrixB[i / 3, i % 3] = double.Parse(b[i]);
		}

		var result = matrixA * matrixB;

		output = MatrixToLatex(result);
	}

	private string MatrixToLatex(TMatrix<double> input)
	{
		StringBuilder sb = new();
		sb.Append("""\begin{bmatrix}""");
		for (int i = 0; i < input.Rows; i++)
		{
			for (int j = 0; j < input.Columns; j++)
			{
				sb.Append(input[i, j]);
				if (j + 1 < input.Columns)
				{
					sb.Append(" & ");
				}
			}
			sb.Append("""\\""");
		}
		sb.Append("""\end{bmatrix}""");
		return sb.ToString();
	}

}


