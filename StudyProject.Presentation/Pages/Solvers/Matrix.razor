@page "/solvers/Matrix"
@using System.Text
@using StudyProject.Application.Common.Builders
@using TMath.Numerics
@using TMath.Numerics.LinearAlgebra
@using TMath.Numerics.Models
@using MathJaxBlazor

<PageTitle>Matrix Operations</PageTitle>

<h3>Matrix Operations</h3>
<br />

<div style="max-width: 800px; display: flex; justify-content: space-between;">

	<div style="display: grid; grid-template-columns: repeat(@arrayASize, 50px); gap: 10px;">
		@for (int i = 0; i < arrayASize * arrayASize; i++)
		{
			<CustomNumber Array="@a" index="@i" />
		}
	</div>

	<div style="display: grid; grid-template-columns: repeat(3, 100px); gap: 10px;">
		<CustomButton Width="100px" OnClick="Add">A + B</CustomButton>
		<CustomButton Width="100px" OnClick="Subtract">A - B</CustomButton>
		<CustomButton Width="100px" OnClick="Multiply">A * B </CustomButton>
	</div>

	<div style="display: grid; grid-template-columns: repeat(@arrayBSize, 50px); gap: 10px;">
		@for (int i = 0; i < arrayBSize * arrayBSize; i++)
		{
			<CustomNumber Array="@b" index="@i" />
		}
	</div>
</div>
<div style="max-width: 800px; display: flex; justify-content: space-between;">


	<div style="display: grid; grid-template-columns: repeat(3, 50px); gap: 10px;">
		<CustomButton Width="50px" OnClick="() => ResizeArrayA(arrayASize + 1)">+</CustomButton>
		<CustomButton Width="50px" OnClick="() => ResizeArrayA(arrayASize - 1)">-</CustomButton>
		<CustomButton OnClick="TransposeA">Transpose</CustomButton>
	</div>

	<div style="display: grid; grid-template-columns: repeat(3, 50px); gap: 10px;">
		<CustomButton Width="50px" OnClick="() => ResizeArrayB(arrayBSize + 1)">+</CustomButton>
		<CustomButton Width="50px" OnClick="() => ResizeArrayB(arrayBSize - 1)">-</CustomButton>
		<CustomButton OnClick="TransposeB">Transpose</CustomButton>
	</div>
</div>
<Divider />
<div>Output: <Equation Value="@output" TeXDisplay="false" /></div>




@code {

	int arrayASize = 3;
	int arrayBSize = 3;

	private void ResizeArrayA(int newvalue)
	{
		if(newvalue <= 0)
			return; 
		arrayASize = newvalue; 
		a = new(new double[newvalue * newvalue]);
	}
	private void ResizeArrayB(int newvalue)
	{
		if(newvalue <= 0)
			return; 
		arrayBSize = newvalue; 
		b = new(new double[newvalue * newvalue]);
	}

	ArrayReference<double> a = new(new double[9]);
	ArrayReference<double> b = new(new double[9]);


	string output;

	private void TransposeA()
	{
		var matrixA = new TMatrix<double>(arrayASize, arrayASize);

		for (int i = 0; i < arrayASize * arrayASize; i++)
		{
			matrixA[i / arrayASize, i % arrayASize] = a[i];
		}


		var result = matrixA.Transpose();

		output = MatrixToLatex(result);
	}

	private void TransposeB()
	{
		var matrixB = new TMatrix<double>(arrayBSize, arrayBSize);

		for (int i = 0; i < arrayBSize * arrayBSize; i++)
		{
			matrixB[i / arrayBSize, i % arrayBSize] = b[i];
		}

		var result = matrixB.Transpose();

		output = MatrixToLatex(result);
	}

	private void Add()
	{
		int max = Math.Max(arrayASize, arrayBSize);
		var matrixA = new TMatrix<double>(max, max);
		var matrixB = new TMatrix<double>(max, max);

		for (int i = 0; i < max * max; i++)
		{
			matrixA[i / max, i % max] = a[i];
			matrixB[i / max, i % max] = b[i];
		}

		var result = matrixA + matrixB;

		output = MatrixToLatex(result);
	}

	private void Subtract()
	{
		int max = Math.Max(arrayASize, arrayBSize);
		var matrixA = new TMatrix<double>(max, max);
		var matrixB = new TMatrix<double>(max, max);

		for (int i = 0; i < max * max; i++)
		{
			matrixA[i / max, i % max] = a[i];
			matrixB[i / max, i % max] = b[i];
		}

		var result = matrixA - matrixB;

		output = MatrixToLatex(result);
	}

	private void Multiply()
	{
		int max = Math.Max(arrayASize, arrayBSize);
		var matrixA = new TMatrix<double>(max, max);
		var matrixB = new TMatrix<double>(max, max);

		for (int i = 0; i < max * max; i++)
		{
			matrixA[i / max, i % max] = a[i];
			matrixB[i / max, i % max] = b[i];
		}

		var result = matrixA * matrixB;

		output = MatrixToLatex(result);
	}

	private string MatrixToLatex(TMatrix<double> input)
	{
		StringBuilder sb = new();
		sb.Append("""\begin{bmatrix}""");
		for (int i = 0; i < input.Rows; i++)
		{
			for (int j = 0; j < input.Columns; j++)
			{
				sb.Append(input[i, j]);
				if (j + 1 < input.Columns)
				{
					sb.Append(" & ");
				}
			}
			sb.Append("""\\""");
		}
		sb.Append("""\end{bmatrix}""");
		return sb.ToString();
	}

}


